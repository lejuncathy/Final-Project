bayes_factor_modified <- L_gamma_modified / L_norm_modified
cat("Bayes factor (Gamma vs Normal):", bayes_factor_modified, "\n")
# Given data
data <- c(-1.2, 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Given data
data <- c(-1.2, 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c(-1.2, 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 1.2,6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 1.2 , 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 1.2 , 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c(1.2 , 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Sensitivity analysis: changing the first observation
data_modified <- c( 1.2 , 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <-  L_norm/L_gamma
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Given data
data <- c(1.2, 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <- L_gamma / L_norm
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Given data
data <- c(1.2, 6.6, 3.4, 7.1, 11.8)
# Normal distribution parameters
mu_norm <- 5
sigma2_norm <- 9
# Gamma distribution parameters
mean_gamma <- 5
var_gamma <- 9
beta_gamma <- var_gamma / mean_gamma  # beta = variance / mean
alpha_gamma <- mean_gamma / beta_gamma  # alpha = mean / beta
# Likelihood for normal distribution
likelihood_normal <- function(data, mu, sigma2) {
prod((1 / sqrt(2 * pi * sigma2)) * exp(-((data - mu)^2) / (2 * sigma2)))
}
# Likelihood for gamma distribution
likelihood_gamma <- function(data, alpha, beta) {
prod((data^(alpha - 1) * exp(-data / beta)) / (gamma(alpha) * beta^alpha))
}
# Compute likelihoods
L_norm <- likelihood_normal(data, mu_norm, sigma2_norm)
L_gamma <- likelihood_gamma(data, alpha_gamma, beta_gamma)
# Output the results
cat("Likelihood under normal distribution:", L_norm, "\n")
cat("Likelihood under gamma distribution:", L_gamma, "\n")
# Strength of evidence (Bayes factor)
bayes_factor <- L_gamma / L_norm
cat("Bayes factor (Gamma vs Normal):", bayes_factor, "\n")
# Given constants
log_8 <- log(8)
z_critical <- qnorm(0.2)  # z_critical = Φ^(-1)(0.2)
# Function to solve for n
solve_n <- function() {
uniroot(function(n) {
left <- log_8 + n / 2 - n
right <- z_critical * sqrt(n)
left - right
}, lower = 1, upper = 1000)$root
}
# Compute the smallest n
n_result <- solve_n()
cat("Smallest n:", n_result, "\n")
url_for_data <- "https://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = True)
head(data)
url_for_data <- "https://bit.ly/vrc01_data"
data <- read.csv(url_for_data, header = TRUE)
head(data)
install.packages("tinytex")
tinytex::install_tinytex()
Sys.Date()
format(Sys.Date(), "%m-%d-%Y")
current_value<-10
while (current_value < 15) {
random_number <- runif(1, min = 0, max = 1)
current_value <- current_value + random_number
cat("Current value:", current_value, "\n")
}
# Generate 5000 random samples from a normal distribution
x <- rnorm(5000, mean = 0, sd = 1)  # Change mean and sd as needed
# Plot histogram
hist(x, breaks = 50, col = "skyblue", border = "black",
main = "Histogram of 5000 Random Samples",
xlab = "Value of x", ylab = "Frequency")
# Generate 5000 random samples from a normal distribution
x <- rnorm(5000, mean = 0, sd = 1)  # Change mean and sd as needed
# Plot histogram
hist(x, breaks = 50, col = "blue", border = "black",
main = "Histogram of 5000 Random Samples",
xlab = "Value of x", ylab = "Frequency")
set.seed(123)
# Parameters
n <- 5
lambda_true <- 1
N <- 50000
z <- qnorm(0.975)
# Storage
lengths <- matrix(0, nrow=N, ncol=3)
lower_miss <- rep(0, 3)
upper_miss <- rep(0, 3)
# Simulation loop
for (i in 1:N) {
x <- rexp(n, rate = lambda_true)
T_sum <- sum(x)
lambda_hat <- n / T_sum
# --- (a) Exact CI based on chi-square ---
lower_a <- qchisq(0.025, 2 * n) / (2 * T_sum)
upper_a <- qchisq(0.975, 2 * n) / (2 * T_sum)
# --- (b) Large-sample MLE CI ---
se_b <- lambda_hat / sqrt(n)
lower_b <- lambda_hat - z * se_b
upper_b <- lambda_hat + z * se_b
if (lower_b < 0) lower_b <- 0  # truncate to avoid negative lambda
# --- (c) Variance-stabilizing (CI for sqrt(lambda)) ---
sqrt_lam_hat <- sqrt(lambda_hat)
se_c <- 1 / (2 * sqrt(n))
lower_c <- (sqrt_lam_hat - z * se_c)^2
upper_c <- (sqrt_lam_hat + z * se_c)^2
# Store lengths
lengths[i, 1] <- upper_a - lower_a
lengths[i, 2] <- upper_b - lower_b
lengths[i, 3] <- upper_c - lower_c
# Count non-coverage
bounds_list <- list(c(lower_a, upper_a), c(lower_b, upper_b), c(lower_c, upper_c))
for (j in 1:3) {
if (lambda_true < bounds_list[[j]][1]) lower_miss[j] <- lower_miss[j] + 1
if (lambda_true > bounds_list[[j]][2]) upper_miss[j] <- upper_miss[j] + 1
}
}
# Results
avg_lengths <- colMeans(lengths)
lower_non_coverage <- lower_miss / N
upper_non_coverage <- upper_miss / N
# Display results
methods <- c("(a) Exact", "(b) MLE", "(c) VST")
result_df <- data.frame(
Method = methods,
Avg_Length = round(avg_lengths, 4),
Lower_NonCoverage = round(lower_non_coverage, 4),
Upper_NonCoverage = round(upper_non_coverage, 4)
)
print(result_df)
set.seed(123)
# Parameters
n <- 5
lambda_true <- 1
N <- 50000
z <- qnorm(0.975)
# Storage
lengths <- matrix(0, nrow=N, ncol=3)
lower_miss <- rep(0, 3)
upper_miss <- rep(0, 3)
# Simulation loop
for (i in 1:N) {
x <- rexp(n, rate = lambda_true)
T_sum <- sum(x)
lambda_hat <- n / T_sum
# --- (a) Exact CI based on chi-square ---
lower_a <- qchisq(0.025, 2 * n) / (2 * T_sum)
upper_a <- qchisq(0.975, 2 * n) / (2 * T_sum)
# --- (b) Large-sample MLE CI ---
se_b <- lambda_hat / sqrt(n)
lower_b <- lambda_hat - z * se_b
upper_b <- lambda_hat + z * se_b
if (lower_b < 0) lower_b <- 0  # truncate to avoid negative lambda
# --- (c) Variance-stabilizing (CI for sqrt(lambda)) ---
sqrt_lam_hat <- sqrt(lambda_hat)
se_c <- 1 / (2 * sqrt(n))
lower_c <- (sqrt_lam_hat - z * se_c)^2
upper_c <- (sqrt_lam_hat + z * se_c)^2
# Store lengths
lengths[i, 1] <- upper_a - lower_a
lengths[i, 2] <- upper_b - lower_b
lengths[i, 3] <- upper_c - lower_c
# Count non-coverage
bounds_list <- list(c(lower_a, upper_a), c(lower_b, upper_b), c(lower_c, upper_c))
for (j in 1:3) {
if (lambda_true < bounds_list[[j]][1]) lower_miss[j] <- lower_miss[j] + 1
if (lambda_true > bounds_list[[j]][2]) upper_miss[j] <- upper_miss[j] + 1
}
}
# Results
avg_lengths <- colMeans(lengths)
lower_non_coverage <- lower_miss / N
upper_non_coverage <- upper_miss / N
# Display results
methods <- c("(a) Exact", "(b) MLE", "(c) VST")
result_df <- data.frame(
Method = methods,
Avg_Length = round(avg_lengths, 4),
Lower_NonCoverage = round(lower_non_coverage, 4),
Upper_NonCoverage = round(upper_non_coverage, 4)
)
print(result_df)
# Data
x <- c(5, 4, 9, 16, 8, 12, 13)
# Given mu
mu <- 8
# Calculate sum of (xi - mu)^2
sum((x - mu)^2)
# Data
x <- c(5, 4, 9, 16, 8, 12, 13)
mu <- 8
# Prior parameters
alpha_prior <- 4
beta_prior <- 6
# Sample size
n <- length(x)
# Sum of (xi - mu)^2
sum_sq_diff <- sum((x - mu)^2)
# Posterior parameters
alpha_post <- alpha_prior + n/2
beta_post <- beta_prior + 0.5 * sum_sq_diff
# Display posterior parameters
alpha_post
beta_post
# Lower and upper bounds
lower <- 1/9
upper <- 1/4
# Compute probability
prob <- pgamma(upper, shape = alpha_post, rate = beta_post) - pgamma(lower, shape = alpha_post, rate = beta_post)
# Display probability
prob
# New prior parameters
alpha_prior <- 3
beta_prior <- 4
# Recalculate posterior parameters
alpha_post <- alpha_prior + n/2
beta_post <- beta_prior + 0.5 * sum_sq_diff
# Recalculate probability
prob <- pgamma(upper, shape = alpha_post, rate = beta_post) - pgamma(lower, shape = alpha_post, rate = beta_post)
# Display new probability
prob
setwd("D:/Data550/Final_project")
